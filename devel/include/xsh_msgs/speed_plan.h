// Generated by gencpp from file xsh_msgs/speed_plan.msg
// DO NOT EDIT!


#ifndef XSH_MSGS_MESSAGE_SPEED_PLAN_H
#define XSH_MSGS_MESSAGE_SPEED_PLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xsh_msgs
{
template <class ContainerAllocator>
struct speed_plan_
{
  typedef speed_plan_<ContainerAllocator> Type;

  speed_plan_()
    : time(0.0)
    , point_num(0)
    , plan_time()
    , plan_speed()  {
    }
  speed_plan_(const ContainerAllocator& _alloc)
    : time(0.0)
    , point_num(0)
    , plan_time(_alloc)
    , plan_speed(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef int16_t _point_num_type;
  _point_num_type point_num;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _plan_time_type;
  _plan_time_type plan_time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _plan_speed_type;
  _plan_speed_type plan_speed;





  typedef boost::shared_ptr< ::xsh_msgs::speed_plan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xsh_msgs::speed_plan_<ContainerAllocator> const> ConstPtr;

}; // struct speed_plan_

typedef ::xsh_msgs::speed_plan_<std::allocator<void> > speed_plan;

typedef boost::shared_ptr< ::xsh_msgs::speed_plan > speed_planPtr;
typedef boost::shared_ptr< ::xsh_msgs::speed_plan const> speed_planConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xsh_msgs::speed_plan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xsh_msgs::speed_plan_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xsh_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'xsh_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/xsh_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xsh_msgs::speed_plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xsh_msgs::speed_plan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xsh_msgs::speed_plan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xsh_msgs::speed_plan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xsh_msgs::speed_plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xsh_msgs::speed_plan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xsh_msgs::speed_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3e98dffdc5b35d04daac2e24f81e4f6";
  }

  static const char* value(const ::xsh_msgs::speed_plan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3e98dffdc5b35d0ULL;
  static const uint64_t static_value2 = 0x4daac2e24f81e4f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::xsh_msgs::speed_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xsh_msgs/speed_plan";
  }

  static const char* value(const ::xsh_msgs::speed_plan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xsh_msgs::speed_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n\
int16 point_num\n\
float64[] plan_time\n\
float64[] plan_speed\n\
\n\
\n\
";
  }

  static const char* value(const ::xsh_msgs::speed_plan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xsh_msgs::speed_plan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.point_num);
      stream.next(m.plan_time);
      stream.next(m.plan_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speed_plan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xsh_msgs::speed_plan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xsh_msgs::speed_plan_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "point_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.point_num);
    s << indent << "plan_time[]" << std::endl;
    for (size_t i = 0; i < v.plan_time.size(); ++i)
    {
      s << indent << "  plan_time[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plan_time[i]);
    }
    s << indent << "plan_speed[]" << std::endl;
    for (size_t i = 0; i < v.plan_speed.size(); ++i)
    {
      s << indent << "  plan_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plan_speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // XSH_MSGS_MESSAGE_SPEED_PLAN_H
