// Generated by gencpp from file anm_msgs/SpiralPath.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_SPIRALPATH_H
#define ANM_MSGS_MESSAGE_SPIRALPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <anm_msgs/PathState.h>
#include <anm_msgs/PathState.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct SpiralPath_
{
  typedef SpiralPath_<ContainerAllocator> Type;

  SpiralPath_()
    : header()
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , sf(0.0)
    , reference_state()
    , goal_state()  {
    }
  SpiralPath_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , sf(0.0)
    , reference_state(_alloc)
    , goal_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _d_type;
  _d_type d;

   typedef double _sf_type;
  _sf_type sf;

   typedef  ::anm_msgs::PathState_<ContainerAllocator>  _reference_state_type;
  _reference_state_type reference_state;

   typedef  ::anm_msgs::PathState_<ContainerAllocator>  _goal_state_type;
  _goal_state_type goal_state;





  typedef boost::shared_ptr< ::anm_msgs::SpiralPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::SpiralPath_<ContainerAllocator> const> ConstPtr;

}; // struct SpiralPath_

typedef ::anm_msgs::SpiralPath_<std::allocator<void> > SpiralPath;

typedef boost::shared_ptr< ::anm_msgs::SpiralPath > SpiralPathPtr;
typedef boost::shared_ptr< ::anm_msgs::SpiralPath const> SpiralPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::SpiralPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::SpiralPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'dbw_mkz_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/dbw_mkz_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'anm_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/anm_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::SpiralPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::SpiralPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::SpiralPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::SpiralPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::SpiralPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::SpiralPath_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::SpiralPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbdb9aa67633991647d7cd82b98e0d51";
  }

  static const char* value(const ::anm_msgs::SpiralPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbdb9aa676339916ULL;
  static const uint64_t static_value2 = 0x47d7cd82b98e0d51ULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::SpiralPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/SpiralPath";
  }

  static const char* value(const ::anm_msgs::SpiralPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::SpiralPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is a parametric representation of a spiral curve\n\
# The curve is used to define a local path\n\
#\n\
# a, b, c, d = parameters that define the spiral curve\n\
# sf = total length of curve (meters)\n\
# reference_state = current position on the curve\n\
# goal_state = endpoint of the curve\n\
\n\
Header header\n\
float64 a\n\
float64 b\n\
float64 c\n\
float64 d\n\
float64 sf\n\
PathState reference_state\n\
PathState goal_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: anm_msgs/PathState\n\
# This message defines a position along a spiral curve\n\
#\n\
# x = x position in global frame (meters)\n\
# y = y position in global frame (meters)\n\
# theta = angle of curve tangent at position x, y (radians)\n\
# k = curvature of curve at position x, y (1/meters)\n\
# s = length in along (meters)\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
float64 k\n\
float64 s\n\
";
  }

  static const char* value(const ::anm_msgs::SpiralPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::SpiralPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.sf);
      stream.next(m.reference_state);
      stream.next(m.goal_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpiralPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::SpiralPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::SpiralPath_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "sf: ";
    Printer<double>::stream(s, indent + "  ", v.sf);
    s << indent << "reference_state: ";
    s << std::endl;
    Printer< ::anm_msgs::PathState_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_state);
    s << indent << "goal_state: ";
    s << std::endl;
    Printer< ::anm_msgs::PathState_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_SPIRALPATH_H
