// Generated by gencpp from file lanelet_map_msgs/LaneletMap.msg
// DO NOT EDIT!


#ifndef LANELET_MAP_MSGS_MESSAGE_LANELETMAP_H
#define LANELET_MAP_MSGS_MESSAGE_LANELETMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <lanelet_map_msgs/Lanelet.h>
#include <lanelet_map_msgs/Lanelet.h>
#include <lanelet_map_msgs/Lanelet.h>
#include <lanelet_map_msgs/Lanelet.h>
#include <lanelet_map_msgs/Lanelet.h>
#include <lanelet_map_msgs/Lanelet.h>

namespace lanelet_map_msgs
{
template <class ContainerAllocator>
struct LaneletMap_
{
  typedef LaneletMap_<ContainerAllocator> Type;

  LaneletMap_()
    : header()
    , current_lane()
    , left_beside()
    , right_beside()
    , forward_following()
    , forward_right()
    , forward_left()  {
    }
  LaneletMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , current_lane(_alloc)
    , left_beside(_alloc)
    , right_beside(_alloc)
    , forward_following(_alloc)
    , forward_right(_alloc)
    , forward_left(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::other >  _current_lane_type;
  _current_lane_type current_lane;

   typedef  ::lanelet_map_msgs::Lanelet_<ContainerAllocator>  _left_beside_type;
  _left_beside_type left_beside;

   typedef  ::lanelet_map_msgs::Lanelet_<ContainerAllocator>  _right_beside_type;
  _right_beside_type right_beside;

   typedef std::vector< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::other >  _forward_following_type;
  _forward_following_type forward_following;

   typedef std::vector< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::other >  _forward_right_type;
  _forward_right_type forward_right;

   typedef std::vector< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::other >  _forward_left_type;
  _forward_left_type forward_left;





  typedef boost::shared_ptr< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> const> ConstPtr;

}; // struct LaneletMap_

typedef ::lanelet_map_msgs::LaneletMap_<std::allocator<void> > LaneletMap;

typedef boost::shared_ptr< ::lanelet_map_msgs::LaneletMap > LaneletMapPtr;
typedef boost::shared_ptr< ::lanelet_map_msgs::LaneletMap const> LaneletMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lanelet_map_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lanelet_map_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/lanelet_map_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3579fead11f7e76167ff825b6fd746c4";
  }

  static const char* value(const ::lanelet_map_msgs::LaneletMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3579fead11f7e761ULL;
  static const uint64_t static_value2 = 0x67ff825b6fd746c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lanelet_map_msgs/LaneletMap";
  }

  static const char* value(const ::lanelet_map_msgs::LaneletMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
Lanelet[] current_lane\n\
Lanelet left_beside\n\
Lanelet right_beside\n\
Lanelet[] forward_following\n\
Lanelet[] forward_right\n\
Lanelet[] forward_left\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: lanelet_map_msgs/Lanelet\n\
int32 id\n\
Way left_bound\n\
Way right_bound\n\
Way centerline\n\
Regulatory regulatory_elements\n\
\n\
================================================================================\n\
MSG: lanelet_map_msgs/Way\n\
string task_area\n\
int8 is_forward\n\
int8 open_concave_obs_det\n\
int8 open_dynamic_obs_det\n\
int8 open_foggy_det\n\
int8 open_water_det\n\
int8 foggy_area\n\
int8 lawn_area\n\
int8 water_area\n\
float64 vel_limit\n\
Node[] points\n\
\n\
================================================================================\n\
MSG: lanelet_map_msgs/Node\n\
int32 id\n\
string type\n\
float64 vlimit\n\
geometry_msgs/Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: lanelet_map_msgs/Regulatory\n\
Node[] special_nodes\n\
Way[] special_ways\n\
";
  }

  static const char* value(const ::lanelet_map_msgs::LaneletMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.current_lane);
      stream.next(m.left_beside);
      stream.next(m.right_beside);
      stream.next(m.forward_following);
      stream.next(m.forward_right);
      stream.next(m.forward_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneletMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lanelet_map_msgs::LaneletMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lanelet_map_msgs::LaneletMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "current_lane[]" << std::endl;
    for (size_t i = 0; i < v.current_lane.size(); ++i)
    {
      s << indent << "  current_lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "    ", v.current_lane[i]);
    }
    s << indent << "left_beside: ";
    s << std::endl;
    Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "  ", v.left_beside);
    s << indent << "right_beside: ";
    s << std::endl;
    Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "  ", v.right_beside);
    s << indent << "forward_following[]" << std::endl;
    for (size_t i = 0; i < v.forward_following.size(); ++i)
    {
      s << indent << "  forward_following[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "    ", v.forward_following[i]);
    }
    s << indent << "forward_right[]" << std::endl;
    for (size_t i = 0; i < v.forward_right.size(); ++i)
    {
      s << indent << "  forward_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "    ", v.forward_right[i]);
    }
    s << indent << "forward_left[]" << std::endl;
    for (size_t i = 0; i < v.forward_left.size(); ++i)
    {
      s << indent << "  forward_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lanelet_map_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "    ", v.forward_left[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANELET_MAP_MSGS_MESSAGE_LANELETMAP_H
