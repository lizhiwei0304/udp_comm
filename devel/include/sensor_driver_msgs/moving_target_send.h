// Generated by gencpp from file sensor_driver_msgs/moving_target_send.msg
// DO NOT EDIT!


#ifndef SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_SEND_H
#define SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_driver_msgs/moving_target.h>

namespace sensor_driver_msgs
{
template <class ContainerAllocator>
struct moving_target_send_
{
  typedef moving_target_send_<ContainerAllocator> Type;

  moving_target_send_()
    : time_stamp(0)
    , movingtarget_num(0)
    , resolution_send(0.0)
    , target()  {
    }
  moving_target_send_(const ContainerAllocator& _alloc)
    : time_stamp(0)
    , movingtarget_num(0)
    , resolution_send(0.0)
    , target(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _movingtarget_num_type;
  _movingtarget_num_type movingtarget_num;

   typedef double _resolution_send_type;
  _resolution_send_type resolution_send;

   typedef std::vector< ::sensor_driver_msgs::moving_target_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >::other >  _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> const> ConstPtr;

}; // struct moving_target_send_

typedef ::sensor_driver_msgs::moving_target_send_<std::allocator<void> > moving_target_send;

typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_send > moving_target_sendPtr;
typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_send const> moving_target_sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensor_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/sensor_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee6df54151d8798d270a6abbbe741402";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee6df54151d8798dULL;
  static const uint64_t static_value2 = 0x270a6abbbe741402ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_driver_msgs/moving_target_send";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 time_stamp        \n\
int32 movingtarget_num   \n\
float64 resolution_send\n\
moving_target[] target          \n\
\n\
================================================================================\n\
MSG: sensor_driver_msgs/moving_target\n\
float64        center_x             \n\
float64        center_y             \n\
float64        object_width         \n\
float64        object_length        \n\
float64        object_high          \n\
\n\
float64          object_rect_x\n\
float64          object_rect_y\n\
float64          object_rect_width\n\
float64          object_rect_height \n\
\n\
float64        x_src                \n\
float64        y_src                \n\
float64        v_x                  \n\
float64        v_y               \n\
float64        v                   \n\
float64        v_theta\n\
float64        pos_heading         \n\
float64        v_w                  \n\
\n\
int32          trackpoint32_index\n\
int32          filter_method\n\
\n\
bool         is_updated           \n\
int32          time_stamp           \n\
int32          ID_number                   \n\
int32          confidence_level    \n\
int32          tracked_times        \n\
int32          miss_tracked_times   \n\
\n\
int32          dis_veh_xy\n\
int32          position_orientation \n\
int32          occluded_state       \n\
int32          object_type        \n\
int32          dangerous_level  \n\
float64        trackpoint_index    \n\
";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.movingtarget_num);
      stream.next(m.resolution_send);
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moving_target_send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_driver_msgs::moving_target_send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_driver_msgs::moving_target_send_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "movingtarget_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.movingtarget_num);
    s << indent << "resolution_send: ";
    Printer<double>::stream(s, indent + "  ", v.resolution_send);
    s << indent << "target[]" << std::endl;
    for (size_t i = 0; i < v.target.size(); ++i)
    {
      s << indent << "  target[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >::stream(s, indent + "    ", v.target[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_SEND_H
