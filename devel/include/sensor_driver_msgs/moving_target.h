// Generated by gencpp from file sensor_driver_msgs/moving_target.msg
// DO NOT EDIT!


#ifndef SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_H
#define SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_driver_msgs
{
template <class ContainerAllocator>
struct moving_target_
{
  typedef moving_target_<ContainerAllocator> Type;

  moving_target_()
    : center_x(0.0)
    , center_y(0.0)
    , object_width(0.0)
    , object_length(0.0)
    , object_high(0.0)
    , object_rect_x(0.0)
    , object_rect_y(0.0)
    , object_rect_width(0.0)
    , object_rect_height(0.0)
    , x_src(0.0)
    , y_src(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v(0.0)
    , v_theta(0.0)
    , pos_heading(0.0)
    , v_w(0.0)
    , trackpoint32_index(0)
    , filter_method(0)
    , is_updated(false)
    , time_stamp(0)
    , ID_number(0)
    , confidence_level(0)
    , tracked_times(0)
    , miss_tracked_times(0)
    , dis_veh_xy(0)
    , position_orientation(0)
    , occluded_state(0)
    , object_type(0)
    , dangerous_level(0)
    , trackpoint_index(0.0)  {
    }
  moving_target_(const ContainerAllocator& _alloc)
    : center_x(0.0)
    , center_y(0.0)
    , object_width(0.0)
    , object_length(0.0)
    , object_high(0.0)
    , object_rect_x(0.0)
    , object_rect_y(0.0)
    , object_rect_width(0.0)
    , object_rect_height(0.0)
    , x_src(0.0)
    , y_src(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v(0.0)
    , v_theta(0.0)
    , pos_heading(0.0)
    , v_w(0.0)
    , trackpoint32_index(0)
    , filter_method(0)
    , is_updated(false)
    , time_stamp(0)
    , ID_number(0)
    , confidence_level(0)
    , tracked_times(0)
    , miss_tracked_times(0)
    , dis_veh_xy(0)
    , position_orientation(0)
    , occluded_state(0)
    , object_type(0)
    , dangerous_level(0)
    , trackpoint_index(0.0)  {
  (void)_alloc;
    }



   typedef double _center_x_type;
  _center_x_type center_x;

   typedef double _center_y_type;
  _center_y_type center_y;

   typedef double _object_width_type;
  _object_width_type object_width;

   typedef double _object_length_type;
  _object_length_type object_length;

   typedef double _object_high_type;
  _object_high_type object_high;

   typedef double _object_rect_x_type;
  _object_rect_x_type object_rect_x;

   typedef double _object_rect_y_type;
  _object_rect_y_type object_rect_y;

   typedef double _object_rect_width_type;
  _object_rect_width_type object_rect_width;

   typedef double _object_rect_height_type;
  _object_rect_height_type object_rect_height;

   typedef double _x_src_type;
  _x_src_type x_src;

   typedef double _y_src_type;
  _y_src_type y_src;

   typedef double _v_x_type;
  _v_x_type v_x;

   typedef double _v_y_type;
  _v_y_type v_y;

   typedef double _v_type;
  _v_type v;

   typedef double _v_theta_type;
  _v_theta_type v_theta;

   typedef double _pos_heading_type;
  _pos_heading_type pos_heading;

   typedef double _v_w_type;
  _v_w_type v_w;

   typedef int32_t _trackpoint32_index_type;
  _trackpoint32_index_type trackpoint32_index;

   typedef int32_t _filter_method_type;
  _filter_method_type filter_method;

   typedef uint8_t _is_updated_type;
  _is_updated_type is_updated;

   typedef int32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _ID_number_type;
  _ID_number_type ID_number;

   typedef int32_t _confidence_level_type;
  _confidence_level_type confidence_level;

   typedef int32_t _tracked_times_type;
  _tracked_times_type tracked_times;

   typedef int32_t _miss_tracked_times_type;
  _miss_tracked_times_type miss_tracked_times;

   typedef int32_t _dis_veh_xy_type;
  _dis_veh_xy_type dis_veh_xy;

   typedef int32_t _position_orientation_type;
  _position_orientation_type position_orientation;

   typedef int32_t _occluded_state_type;
  _occluded_state_type occluded_state;

   typedef int32_t _object_type_type;
  _object_type_type object_type;

   typedef int32_t _dangerous_level_type;
  _dangerous_level_type dangerous_level;

   typedef double _trackpoint_index_type;
  _trackpoint_index_type trackpoint_index;





  typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target_<ContainerAllocator> const> ConstPtr;

}; // struct moving_target_

typedef ::sensor_driver_msgs::moving_target_<std::allocator<void> > moving_target;

typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target > moving_targetPtr;
typedef boost::shared_ptr< ::sensor_driver_msgs::moving_target const> moving_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_driver_msgs::moving_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensor_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/sensor_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::moving_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::moving_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::moving_target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec7b54c149fe914e158d9dcc3b59e9f1";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec7b54c149fe914eULL;
  static const uint64_t static_value2 = 0x158d9dcc3b59e9f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_driver_msgs/moving_target";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64        center_x             \n\
float64        center_y             \n\
float64        object_width         \n\
float64        object_length        \n\
float64        object_high          \n\
\n\
float64          object_rect_x\n\
float64          object_rect_y\n\
float64          object_rect_width\n\
float64          object_rect_height \n\
\n\
float64        x_src                \n\
float64        y_src                \n\
float64        v_x                  \n\
float64        v_y               \n\
float64        v                   \n\
float64        v_theta\n\
float64        pos_heading         \n\
float64        v_w                  \n\
\n\
int32          trackpoint32_index\n\
int32          filter_method\n\
\n\
bool         is_updated           \n\
int32          time_stamp           \n\
int32          ID_number                   \n\
int32          confidence_level    \n\
int32          tracked_times        \n\
int32          miss_tracked_times   \n\
\n\
int32          dis_veh_xy\n\
int32          position_orientation \n\
int32          occluded_state       \n\
int32          object_type        \n\
int32          dangerous_level  \n\
float64        trackpoint_index    \n\
";
  }

  static const char* value(const ::sensor_driver_msgs::moving_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.object_width);
      stream.next(m.object_length);
      stream.next(m.object_high);
      stream.next(m.object_rect_x);
      stream.next(m.object_rect_y);
      stream.next(m.object_rect_width);
      stream.next(m.object_rect_height);
      stream.next(m.x_src);
      stream.next(m.y_src);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.v);
      stream.next(m.v_theta);
      stream.next(m.pos_heading);
      stream.next(m.v_w);
      stream.next(m.trackpoint32_index);
      stream.next(m.filter_method);
      stream.next(m.is_updated);
      stream.next(m.time_stamp);
      stream.next(m.ID_number);
      stream.next(m.confidence_level);
      stream.next(m.tracked_times);
      stream.next(m.miss_tracked_times);
      stream.next(m.dis_veh_xy);
      stream.next(m.position_orientation);
      stream.next(m.occluded_state);
      stream.next(m.object_type);
      stream.next(m.dangerous_level);
      stream.next(m.trackpoint_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moving_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_driver_msgs::moving_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_driver_msgs::moving_target_<ContainerAllocator>& v)
  {
    s << indent << "center_x: ";
    Printer<double>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<double>::stream(s, indent + "  ", v.center_y);
    s << indent << "object_width: ";
    Printer<double>::stream(s, indent + "  ", v.object_width);
    s << indent << "object_length: ";
    Printer<double>::stream(s, indent + "  ", v.object_length);
    s << indent << "object_high: ";
    Printer<double>::stream(s, indent + "  ", v.object_high);
    s << indent << "object_rect_x: ";
    Printer<double>::stream(s, indent + "  ", v.object_rect_x);
    s << indent << "object_rect_y: ";
    Printer<double>::stream(s, indent + "  ", v.object_rect_y);
    s << indent << "object_rect_width: ";
    Printer<double>::stream(s, indent + "  ", v.object_rect_width);
    s << indent << "object_rect_height: ";
    Printer<double>::stream(s, indent + "  ", v.object_rect_height);
    s << indent << "x_src: ";
    Printer<double>::stream(s, indent + "  ", v.x_src);
    s << indent << "y_src: ";
    Printer<double>::stream(s, indent + "  ", v.y_src);
    s << indent << "v_x: ";
    Printer<double>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<double>::stream(s, indent + "  ", v.v_y);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "v_theta: ";
    Printer<double>::stream(s, indent + "  ", v.v_theta);
    s << indent << "pos_heading: ";
    Printer<double>::stream(s, indent + "  ", v.pos_heading);
    s << indent << "v_w: ";
    Printer<double>::stream(s, indent + "  ", v.v_w);
    s << indent << "trackpoint32_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trackpoint32_index);
    s << indent << "filter_method: ";
    Printer<int32_t>::stream(s, indent + "  ", v.filter_method);
    s << indent << "is_updated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_updated);
    s << indent << "time_stamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "ID_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID_number);
    s << indent << "confidence_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.confidence_level);
    s << indent << "tracked_times: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracked_times);
    s << indent << "miss_tracked_times: ";
    Printer<int32_t>::stream(s, indent + "  ", v.miss_tracked_times);
    s << indent << "dis_veh_xy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dis_veh_xy);
    s << indent << "position_orientation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_orientation);
    s << indent << "occluded_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.occluded_state);
    s << indent << "object_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_type);
    s << indent << "dangerous_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dangerous_level);
    s << indent << "trackpoint_index: ";
    Printer<double>::stream(s, indent + "  ", v.trackpoint_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_DRIVER_MSGS_MESSAGE_MOVING_TARGET_H
