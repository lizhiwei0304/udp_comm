// Generated by gencpp from file iv_slam_ros_msgs/OptimizationInsertResultRequest.msg
// DO NOT EDIT!


#ifndef IV_SLAM_ROS_MSGS_MESSAGE_OPTIMIZATIONINSERTRESULTREQUEST_H
#define IV_SLAM_ROS_MSGS_MESSAGE_OPTIMIZATIONINSERTRESULTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Odometry.h>
#include <iv_slam_ros_msgs/insertion_submaps.h>

namespace iv_slam_ros_msgs
{
template <class ContainerAllocator>
struct OptimizationInsertResultRequest_
{
  typedef OptimizationInsertResultRequest_<ContainerAllocator> Type;

  OptimizationInsertResultRequest_()
    : trajectory_id(0)
    , time(0.0)
    , file_time_name()
    , num_submap(0)
    , range_data_pose()
    , insertion_result()
    , current_range_data_index(0)  {
    }
  OptimizationInsertResultRequest_(const ContainerAllocator& _alloc)
    : trajectory_id(0)
    , time(0.0)
    , file_time_name(_alloc)
    , num_submap(0)
    , range_data_pose(_alloc)
    , insertion_result(_alloc)
    , current_range_data_index(0)  {
  (void)_alloc;
    }



   typedef int32_t _trajectory_id_type;
  _trajectory_id_type trajectory_id;

   typedef double _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_time_name_type;
  _file_time_name_type file_time_name;

   typedef int32_t _num_submap_type;
  _num_submap_type num_submap;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _range_data_pose_type;
  _range_data_pose_type range_data_pose;

   typedef  ::iv_slam_ros_msgs::insertion_submaps_<ContainerAllocator>  _insertion_result_type;
  _insertion_result_type insertion_result;

   typedef int32_t _current_range_data_index_type;
  _current_range_data_index_type current_range_data_index;





  typedef boost::shared_ptr< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizationInsertResultRequest_

typedef ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<std::allocator<void> > OptimizationInsertResultRequest;

typedef boost::shared_ptr< ::iv_slam_ros_msgs::OptimizationInsertResultRequest > OptimizationInsertResultRequestPtr;
typedef boost::shared_ptr< ::iv_slam_ros_msgs::OptimizationInsertResultRequest const> OptimizationInsertResultRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iv_slam_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'iv_slam_ros_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/iv_slam_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2318c3eba77c1405411d17648da8e4ec";
  }

  static const char* value(const ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2318c3eba77c1405ULL;
  static const uint64_t static_value2 = 0x411d17648da8e4ecULL;
};

template<class ContainerAllocator>
struct DataType< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iv_slam_ros_msgs/OptimizationInsertResultRequest";
  }

  static const char* value(const ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 trajectory_id\n\
float64 time\n\
string file_time_name\n\
int32 num_submap\n\
nav_msgs/Odometry range_data_pose\n\
insertion_submaps insertion_result\n\
int32 current_range_data_index\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: iv_slam_ros_msgs/insertion_submaps\n\
int32 num_submap\n\
SubmapIndex[] submap\n\
\n\
================================================================================\n\
MSG: iv_slam_ros_msgs/SubmapIndex\n\
int32 trajectory_id\n\
int32 submap_index\n\
bool finishflag\n\
geometry_msgs/Pose pose\n\
";
  }

  static const char* value(const ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory_id);
      stream.next(m.time);
      stream.next(m.file_time_name);
      stream.next(m.num_submap);
      stream.next(m.range_data_pose);
      stream.next(m.insertion_result);
      stream.next(m.current_range_data_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizationInsertResultRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iv_slam_ros_msgs::OptimizationInsertResultRequest_<ContainerAllocator>& v)
  {
    s << indent << "trajectory_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trajectory_id);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "file_time_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_time_name);
    s << indent << "num_submap: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_submap);
    s << indent << "range_data_pose: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.range_data_pose);
    s << indent << "insertion_result: ";
    s << std::endl;
    Printer< ::iv_slam_ros_msgs::insertion_submaps_<ContainerAllocator> >::stream(s, indent + "  ", v.insertion_result);
    s << indent << "current_range_data_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_range_data_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IV_SLAM_ROS_MSGS_MESSAGE_OPTIMIZATIONINSERTRESULTREQUEST_H
