// Generated by gencpp from file iv_dynamicobject_msgs/moving_target.msg
// DO NOT EDIT!


#ifndef IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_H
#define IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <iv_dynamicobject_msgs/Points.h>
#include <iv_dynamicobject_msgs/Points.h>
#include <iv_dynamicobject_msgs/History_traj.h>
#include <iv_dynamicobject_msgs/Predict_traj.h>

namespace iv_dynamicobject_msgs
{
template <class ContainerAllocator>
struct moving_target_
{
  typedef moving_target_<ContainerAllocator> Type;

  moving_target_()
    : ID_number(0)
    , center_point()
    , line_num(0)
    , line_point()
    , object_high(0.0)
    , object_type(0)
    , is_updated(false)
    , tracked_times(0)
    , dangerous_level(0)
    , history_num(0)
    , history_traj()
    , predict_num(0)
    , predict_traj()  {
    }
  moving_target_(const ContainerAllocator& _alloc)
    : ID_number(0)
    , center_point(_alloc)
    , line_num(0)
    , line_point(_alloc)
    , object_high(0.0)
    , object_type(0)
    , is_updated(false)
    , tracked_times(0)
    , dangerous_level(0)
    , history_num(0)
    , history_traj(_alloc)
    , predict_num(0)
    , predict_traj(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _ID_number_type;
  _ID_number_type ID_number;

   typedef  ::iv_dynamicobject_msgs::Points_<ContainerAllocator>  _center_point_type;
  _center_point_type center_point;

   typedef int32_t _line_num_type;
  _line_num_type line_num;

   typedef std::vector< ::iv_dynamicobject_msgs::Points_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iv_dynamicobject_msgs::Points_<ContainerAllocator> >::other >  _line_point_type;
  _line_point_type line_point;

   typedef float _object_high_type;
  _object_high_type object_high;

   typedef int32_t _object_type_type;
  _object_type_type object_type;

   typedef uint8_t _is_updated_type;
  _is_updated_type is_updated;

   typedef int32_t _tracked_times_type;
  _tracked_times_type tracked_times;

   typedef int32_t _dangerous_level_type;
  _dangerous_level_type dangerous_level;

   typedef int32_t _history_num_type;
  _history_num_type history_num;

   typedef std::vector< ::iv_dynamicobject_msgs::History_traj_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iv_dynamicobject_msgs::History_traj_<ContainerAllocator> >::other >  _history_traj_type;
  _history_traj_type history_traj;

   typedef int32_t _predict_num_type;
  _predict_num_type predict_num;

   typedef std::vector< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >::other >  _predict_traj_type;
  _predict_traj_type predict_traj;





  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> const> ConstPtr;

}; // struct moving_target_

typedef ::iv_dynamicobject_msgs::moving_target_<std::allocator<void> > moving_target;

typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target > moving_targetPtr;
typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target const> moving_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iv_dynamicobject_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iv_dynamicobject_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/iv_dynamicobject_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54e1380b44fd25ff42cfc852f7e95898";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54e1380b44fd25ffULL;
  static const uint64_t static_value2 = 0x42cfc852f7e95898ULL;
};

template<class ContainerAllocator>
struct DataType< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iv_dynamicobject_msgs/moving_target";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    int32 ID_number\n\
    Points center_point\n\
    int32 line_num\n\
    Points[] line_point   \n\
    float32 object_high\n\
    int32 object_type    \n\
    bool is_updated\n\
    int32  tracked_times\n\
    int32  dangerous_level\n\
    int32  history_num\n\
    History_traj[] history_traj\n\
    int32  predict_num\n\
    Predict_traj[] predict_traj       \n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/Points\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/History_traj\n\
    float64 time_stamp\n\
    Points center_point\n\
    int32 line_num\n\
    Points[] line_point\n\
    \n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/Predict_traj\n\
    float64 time_stamp\n\
    Points point\n\
    float32 v_x\n\
    float32 v_y\n\
    float32 acc_x\n\
    float32 acc_y\n\
    float32 pos_head\n\
    float32 v_w\n\
    int16 confidence_level\n\
";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID_number);
      stream.next(m.center_point);
      stream.next(m.line_num);
      stream.next(m.line_point);
      stream.next(m.object_high);
      stream.next(m.object_type);
      stream.next(m.is_updated);
      stream.next(m.tracked_times);
      stream.next(m.dangerous_level);
      stream.next(m.history_num);
      stream.next(m.history_traj);
      stream.next(m.predict_num);
      stream.next(m.predict_traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moving_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator>& v)
  {
    s << indent << "ID_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID_number);
    s << indent << "center_point: ";
    s << std::endl;
    Printer< ::iv_dynamicobject_msgs::Points_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point);
    s << indent << "line_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.line_num);
    s << indent << "line_point[]" << std::endl;
    for (size_t i = 0; i < v.line_point.size(); ++i)
    {
      s << indent << "  line_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iv_dynamicobject_msgs::Points_<ContainerAllocator> >::stream(s, indent + "    ", v.line_point[i]);
    }
    s << indent << "object_high: ";
    Printer<float>::stream(s, indent + "  ", v.object_high);
    s << indent << "object_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_type);
    s << indent << "is_updated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_updated);
    s << indent << "tracked_times: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracked_times);
    s << indent << "dangerous_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dangerous_level);
    s << indent << "history_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.history_num);
    s << indent << "history_traj[]" << std::endl;
    for (size_t i = 0; i < v.history_traj.size(); ++i)
    {
      s << indent << "  history_traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iv_dynamicobject_msgs::History_traj_<ContainerAllocator> >::stream(s, indent + "    ", v.history_traj[i]);
    }
    s << indent << "predict_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.predict_num);
    s << indent << "predict_traj[]" << std::endl;
    for (size_t i = 0; i < v.predict_traj.size(); ++i)
    {
      s << indent << "  predict_traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >::stream(s, indent + "    ", v.predict_traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_H
