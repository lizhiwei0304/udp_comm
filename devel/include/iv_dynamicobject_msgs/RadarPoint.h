// Generated by gencpp from file iv_dynamicobject_msgs/RadarPoint.msg
// DO NOT EDIT!


#ifndef IV_DYNAMICOBJECT_MSGS_MESSAGE_RADARPOINT_H
#define IV_DYNAMICOBJECT_MSGS_MESSAGE_RADARPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iv_dynamicobject_msgs
{
template <class ContainerAllocator>
struct RadarPoint_
{
  typedef RadarPoint_<ContainerAllocator> Type;

  RadarPoint_()
    : target_ID(0)
    , range(0.0)
    , v(0.0)
    , angle(0.0)
    , x(0.0)
    , y(0.0)
    , valid(false)
    , status(0)
    , moving(0)
    , moving_fast(false)
    , moving_slow(false)  {
    }
  RadarPoint_(const ContainerAllocator& _alloc)
    : target_ID(0)
    , range(0.0)
    , v(0.0)
    , angle(0.0)
    , x(0.0)
    , y(0.0)
    , valid(false)
    , status(0)
    , moving(0)
    , moving_fast(false)
    , moving_slow(false)  {
  (void)_alloc;
    }



   typedef uint8_t _target_ID_type;
  _target_ID_type target_ID;

   typedef float _range_type;
  _range_type range;

   typedef float _v_type;
  _v_type v;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint8_t _moving_fast_type;
  _moving_fast_type moving_fast;

   typedef uint8_t _moving_slow_type;
  _moving_slow_type moving_slow;





  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPoint_

typedef ::iv_dynamicobject_msgs::RadarPoint_<std::allocator<void> > RadarPoint;

typedef boost::shared_ptr< ::iv_dynamicobject_msgs::RadarPoint > RadarPointPtr;
typedef boost::shared_ptr< ::iv_dynamicobject_msgs::RadarPoint const> RadarPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iv_dynamicobject_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iv_dynamicobject_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/iv_dynamicobject_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cba5c3ffed2f8ad0288b366e555ab33f";
  }

  static const char* value(const ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcba5c3ffed2f8ad0ULL;
  static const uint64_t static_value2 = 0x288b366e555ab33fULL;
};

template<class ContainerAllocator>
struct DataType< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iv_dynamicobject_msgs/RadarPoint";
  }

  static const char* value(const ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 target_ID\n\
float32 range\n\
float32 v\n\
float32 angle\n\
float32 x\n\
float32 y\n\
bool valid\n\
uint8 status\n\
uint8 moving\n\
bool moving_fast\n\
bool moving_slow\n\
";
  }

  static const char* value(const ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_ID);
      stream.next(m.range);
      stream.next(m.v);
      stream.next(m.angle);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.valid);
      stream.next(m.status);
      stream.next(m.moving);
      stream.next(m.moving_fast);
      stream.next(m.moving_slow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iv_dynamicobject_msgs::RadarPoint_<ContainerAllocator>& v)
  {
    s << indent << "target_ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_ID);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "moving_fast: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_fast);
    s << indent << "moving_slow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_slow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IV_DYNAMICOBJECT_MSGS_MESSAGE_RADARPOINT_H
