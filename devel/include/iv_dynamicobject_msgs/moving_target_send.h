// Generated by gencpp from file iv_dynamicobject_msgs/moving_target_send.msg
// DO NOT EDIT!


#ifndef IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_SEND_H
#define IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <iv_dynamicobject_msgs/moving_target.h>

namespace iv_dynamicobject_msgs
{
template <class ContainerAllocator>
struct moving_target_send_
{
  typedef moving_target_send_<ContainerAllocator> Type;

  moving_target_send_()
    : time_stamp(0.0)
    , target_num(0)
    , target()  {
    }
  moving_target_send_(const ContainerAllocator& _alloc)
    : time_stamp(0.0)
    , target_num(0)
    , target(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _target_num_type;
  _target_num_type target_num;

   typedef std::vector< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >::other >  _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> const> ConstPtr;

}; // struct moving_target_send_

typedef ::iv_dynamicobject_msgs::moving_target_send_<std::allocator<void> > moving_target_send;

typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_send > moving_target_sendPtr;
typedef boost::shared_ptr< ::iv_dynamicobject_msgs::moving_target_send const> moving_target_sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iv_dynamicobject_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iv_dynamicobject_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/iv_dynamicobject_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52c14969bef6f78128016409bcbd38ec";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52c14969bef6f781ULL;
  static const uint64_t static_value2 = 0x28016409bcbd38ecULL;
};

template<class ContainerAllocator>
struct DataType< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iv_dynamicobject_msgs/moving_target_send";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time_stamp        \n\
int32 target_num\n\
moving_target[] target          \n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/moving_target\n\
    int32 ID_number\n\
    Points center_point\n\
    int32 line_num\n\
    Points[] line_point   \n\
    float32 object_high\n\
    int32 object_type    \n\
    bool is_updated\n\
    int32  tracked_times\n\
    int32  dangerous_level\n\
    int32  history_num\n\
    History_traj[] history_traj\n\
    int32  predict_num\n\
    Predict_traj[] predict_traj       \n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/Points\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/History_traj\n\
    float64 time_stamp\n\
    Points center_point\n\
    int32 line_num\n\
    Points[] line_point\n\
    \n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/Predict_traj\n\
    float64 time_stamp\n\
    Points point\n\
    float32 v_x\n\
    float32 v_y\n\
    float32 acc_x\n\
    float32 acc_y\n\
    float32 pos_head\n\
    float32 v_w\n\
    int16 confidence_level\n\
";
  }

  static const char* value(const ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.target_num);
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moving_target_send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iv_dynamicobject_msgs::moving_target_send_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "target_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_num);
    s << indent << "target[]" << std::endl;
    for (size_t i = 0; i < v.target.size(); ++i)
    {
      s << indent << "  target[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iv_dynamicobject_msgs::moving_target_<ContainerAllocator> >::stream(s, indent + "    ", v.target[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IV_DYNAMICOBJECT_MSGS_MESSAGE_MOVING_TARGET_SEND_H
