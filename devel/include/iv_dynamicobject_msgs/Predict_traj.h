// Generated by gencpp from file iv_dynamicobject_msgs/Predict_traj.msg
// DO NOT EDIT!


#ifndef IV_DYNAMICOBJECT_MSGS_MESSAGE_PREDICT_TRAJ_H
#define IV_DYNAMICOBJECT_MSGS_MESSAGE_PREDICT_TRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <iv_dynamicobject_msgs/Points.h>

namespace iv_dynamicobject_msgs
{
template <class ContainerAllocator>
struct Predict_traj_
{
  typedef Predict_traj_<ContainerAllocator> Type;

  Predict_traj_()
    : time_stamp(0.0)
    , point()
    , v_x(0.0)
    , v_y(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , pos_head(0.0)
    , v_w(0.0)
    , confidence_level(0)  {
    }
  Predict_traj_(const ContainerAllocator& _alloc)
    : time_stamp(0.0)
    , point(_alloc)
    , v_x(0.0)
    , v_y(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , pos_head(0.0)
    , v_w(0.0)
    , confidence_level(0)  {
  (void)_alloc;
    }



   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef  ::iv_dynamicobject_msgs::Points_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef float _v_x_type;
  _v_x_type v_x;

   typedef float _v_y_type;
  _v_y_type v_y;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _pos_head_type;
  _pos_head_type pos_head;

   typedef float _v_w_type;
  _v_w_type v_w;

   typedef int16_t _confidence_level_type;
  _confidence_level_type confidence_level;





  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> const> ConstPtr;

}; // struct Predict_traj_

typedef ::iv_dynamicobject_msgs::Predict_traj_<std::allocator<void> > Predict_traj;

typedef boost::shared_ptr< ::iv_dynamicobject_msgs::Predict_traj > Predict_trajPtr;
typedef boost::shared_ptr< ::iv_dynamicobject_msgs::Predict_traj const> Predict_trajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iv_dynamicobject_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iv_dynamicobject_msgs': ['/home/lizhiwei/Desktop/udp_comm/src/msgs/iv_dynamicobject_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e493c0baa9e7f0756323a00cb2bfc97a";
  }

  static const char* value(const ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe493c0baa9e7f075ULL;
  static const uint64_t static_value2 = 0x6323a00cb2bfc97aULL;
};

template<class ContainerAllocator>
struct DataType< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iv_dynamicobject_msgs/Predict_traj";
  }

  static const char* value(const ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    float64 time_stamp\n\
    Points point\n\
    float32 v_x\n\
    float32 v_y\n\
    float32 acc_x\n\
    float32 acc_y\n\
    float32 pos_head\n\
    float32 v_w\n\
    int16 confidence_level\n\
\n\
================================================================================\n\
MSG: iv_dynamicobject_msgs/Points\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.point);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.pos_head);
      stream.next(m.v_w);
      stream.next(m.confidence_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Predict_traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iv_dynamicobject_msgs::Predict_traj_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::iv_dynamicobject_msgs::Points_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "v_x: ";
    Printer<float>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<float>::stream(s, indent + "  ", v.v_y);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "pos_head: ";
    Printer<float>::stream(s, indent + "  ", v.pos_head);
    s << indent << "v_w: ";
    Printer<float>::stream(s, indent + "  ", v.v_w);
    s << indent << "confidence_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.confidence_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IV_DYNAMICOBJECT_MSGS_MESSAGE_PREDICT_TRAJ_H
