# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anm_msgs/V2XTrafficLight.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class V2XTrafficLight(genpy.Message):
  _md5sum = "c63ccb831497f2fd06b1f8852c656d2f"
  _type = "anm_msgs/V2XTrafficLight"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Traffic light v2x custom header
#
# id             = ID of traffic light (for traffic lights)
# position       = x y position in odom frame (meters)
# yaw            = heading in radians north of east
# effect_length  = length of the "fence line" for traffic light (meters)
# time_to_change = the time left for the light state to  change (seconds)
# light_state    = current state of the light (below has state numbers)

uint32 id
geometry_msgs/Point position
float64 yaw
float64 effect_length
float64 time_to_change

uint8 light_state
uint8 DARK = 0
uint8 GREEN = 1
uint8 YELLOW = 2
uint8 RED = 3
uint8 V2X_LIGHT_STATE_KIND_COUNT = 4

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  DARK = 0
  GREEN = 1
  YELLOW = 2
  RED = 3
  V2X_LIGHT_STATE_KIND_COUNT = 4

  __slots__ = ['id','position','yaw','effect_length','time_to_change','light_state']
  _slot_types = ['uint32','geometry_msgs/Point','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,yaw,effect_length,time_to_change,light_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(V2XTrafficLight, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.yaw is None:
        self.yaw = 0.
      if self.effect_length is None:
        self.effect_length = 0.
      if self.time_to_change is None:
        self.time_to_change = 0.
      if self.light_state is None:
        self.light_state = 0
    else:
      self.id = 0
      self.position = geometry_msgs.msg.Point()
      self.yaw = 0.
      self.effect_length = 0.
      self.time_to_change = 0.
      self.light_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I6dB().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.effect_length, _x.time_to_change, _x.light_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 53
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.effect_length, _x.time_to_change, _x.light_state,) = _get_struct_I6dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I6dB().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.effect_length, _x.time_to_change, _x.light_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 53
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.effect_length, _x.time_to_change, _x.light_state,) = _get_struct_I6dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I6dB = None
def _get_struct_I6dB():
    global _struct_I6dB
    if _struct_I6dB is None:
        _struct_I6dB = struct.Struct("<I6dB")
    return _struct_I6dB
