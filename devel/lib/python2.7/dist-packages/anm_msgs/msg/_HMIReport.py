# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anm_msgs/HMIReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class HMIReport(genpy.Message):
  _md5sum = "515b6d3b9f37b3178d08258bc23fa8f9"
  _type = "anm_msgs/HMIReport"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message indicates input changes on the HMI
# Any field with an '_pressed' at the end is a button update (1 = update, 0 = not)
# Any field after with a 1 means PASS/ON/SET, and 0 means FAIIL/OFF/UNSET (except gear change)
# For gear change, 0=park, 1=drive, 2=reverse, 3=neutral, 4=low

Header header
uint8 auto_toggle_pressed
uint8 manual_estop_pressed
uint8 auto_engage_pressed
uint8 auto_disengage_pressed
uint8 environment_checks_pressed
uint8 system_checks_pressed
uint8 emergency_pullover_exit_pressed
uint8 manual_drive_pressed
uint8 gear_change_pressed
uint8 auto_toggle
uint8 manual_estop
uint8 environment_checks
uint8 system_checks
uint8 emergency_pullover_exit
uint8 gear_setting


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','auto_toggle_pressed','manual_estop_pressed','auto_engage_pressed','auto_disengage_pressed','environment_checks_pressed','system_checks_pressed','emergency_pullover_exit_pressed','manual_drive_pressed','gear_change_pressed','auto_toggle','manual_estop','environment_checks','system_checks','emergency_pullover_exit','gear_setting']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,auto_toggle_pressed,manual_estop_pressed,auto_engage_pressed,auto_disengage_pressed,environment_checks_pressed,system_checks_pressed,emergency_pullover_exit_pressed,manual_drive_pressed,gear_change_pressed,auto_toggle,manual_estop,environment_checks,system_checks,emergency_pullover_exit,gear_setting

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMIReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.auto_toggle_pressed is None:
        self.auto_toggle_pressed = 0
      if self.manual_estop_pressed is None:
        self.manual_estop_pressed = 0
      if self.auto_engage_pressed is None:
        self.auto_engage_pressed = 0
      if self.auto_disengage_pressed is None:
        self.auto_disengage_pressed = 0
      if self.environment_checks_pressed is None:
        self.environment_checks_pressed = 0
      if self.system_checks_pressed is None:
        self.system_checks_pressed = 0
      if self.emergency_pullover_exit_pressed is None:
        self.emergency_pullover_exit_pressed = 0
      if self.manual_drive_pressed is None:
        self.manual_drive_pressed = 0
      if self.gear_change_pressed is None:
        self.gear_change_pressed = 0
      if self.auto_toggle is None:
        self.auto_toggle = 0
      if self.manual_estop is None:
        self.manual_estop = 0
      if self.environment_checks is None:
        self.environment_checks = 0
      if self.system_checks is None:
        self.system_checks = 0
      if self.emergency_pullover_exit is None:
        self.emergency_pullover_exit = 0
      if self.gear_setting is None:
        self.gear_setting = 0
    else:
      self.header = std_msgs.msg.Header()
      self.auto_toggle_pressed = 0
      self.manual_estop_pressed = 0
      self.auto_engage_pressed = 0
      self.auto_disengage_pressed = 0
      self.environment_checks_pressed = 0
      self.system_checks_pressed = 0
      self.emergency_pullover_exit_pressed = 0
      self.manual_drive_pressed = 0
      self.gear_change_pressed = 0
      self.auto_toggle = 0
      self.manual_estop = 0
      self.environment_checks = 0
      self.system_checks = 0
      self.emergency_pullover_exit = 0
      self.gear_setting = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15B().pack(_x.auto_toggle_pressed, _x.manual_estop_pressed, _x.auto_engage_pressed, _x.auto_disengage_pressed, _x.environment_checks_pressed, _x.system_checks_pressed, _x.emergency_pullover_exit_pressed, _x.manual_drive_pressed, _x.gear_change_pressed, _x.auto_toggle, _x.manual_estop, _x.environment_checks, _x.system_checks, _x.emergency_pullover_exit, _x.gear_setting))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.auto_toggle_pressed, _x.manual_estop_pressed, _x.auto_engage_pressed, _x.auto_disengage_pressed, _x.environment_checks_pressed, _x.system_checks_pressed, _x.emergency_pullover_exit_pressed, _x.manual_drive_pressed, _x.gear_change_pressed, _x.auto_toggle, _x.manual_estop, _x.environment_checks, _x.system_checks, _x.emergency_pullover_exit, _x.gear_setting,) = _get_struct_15B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15B().pack(_x.auto_toggle_pressed, _x.manual_estop_pressed, _x.auto_engage_pressed, _x.auto_disengage_pressed, _x.environment_checks_pressed, _x.system_checks_pressed, _x.emergency_pullover_exit_pressed, _x.manual_drive_pressed, _x.gear_change_pressed, _x.auto_toggle, _x.manual_estop, _x.environment_checks, _x.system_checks, _x.emergency_pullover_exit, _x.gear_setting))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.auto_toggle_pressed, _x.manual_estop_pressed, _x.auto_engage_pressed, _x.auto_disengage_pressed, _x.environment_checks_pressed, _x.system_checks_pressed, _x.emergency_pullover_exit_pressed, _x.manual_drive_pressed, _x.gear_change_pressed, _x.auto_toggle, _x.manual_estop, _x.environment_checks, _x.system_checks, _x.emergency_pullover_exit, _x.gear_setting,) = _get_struct_15B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_15B = None
def _get_struct_15B():
    global _struct_15B
    if _struct_15B is None:
        _struct_15B = struct.Struct("<15B")
    return _struct_15B
