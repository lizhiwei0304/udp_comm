# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speed_debug_msgs/super_point.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import speed_debug_msgs.msg

class super_point(genpy.Message):
  _md5sum = "fdc128084915a3dc47e2491ff229fb45"
  _type = "speed_debug_msgs/super_point"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """v v
curv curv
speed_time time
float64 x
float64 y
float64 s
float64 acc
================================================================================
MSG: speed_debug_msgs/v
float64 v_max_dynamic
float64 v_lat_acc
float64 v_lon_acc
float64 v_slide_dec
float64 v_lon_dec
float64 v_jerk
float64 v_blind
float64 v_constrained
================================================================================
MSG: speed_debug_msgs/curv
float64 curv_final
================================================================================
MSG: speed_debug_msgs/speed_time
float64 time"""
  __slots__ = ['v','curv','time','x','y','s','acc']
  _slot_types = ['speed_debug_msgs/v','speed_debug_msgs/curv','speed_debug_msgs/speed_time','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       v,curv,time,x,y,s,acc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(super_point, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.v is None:
        self.v = speed_debug_msgs.msg.v()
      if self.curv is None:
        self.curv = speed_debug_msgs.msg.curv()
      if self.time is None:
        self.time = speed_debug_msgs.msg.speed_time()
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.s is None:
        self.s = 0.
      if self.acc is None:
        self.acc = 0.
    else:
      self.v = speed_debug_msgs.msg.v()
      self.curv = speed_debug_msgs.msg.curv()
      self.time = speed_debug_msgs.msg.speed_time()
      self.x = 0.
      self.y = 0.
      self.s = 0.
      self.acc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.v.v_max_dynamic, _x.v.v_lat_acc, _x.v.v_lon_acc, _x.v.v_slide_dec, _x.v.v_lon_dec, _x.v.v_jerk, _x.v.v_blind, _x.v.v_constrained, _x.curv.curv_final, _x.time.time, _x.x, _x.y, _x.s, _x.acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.v is None:
        self.v = speed_debug_msgs.msg.v()
      if self.curv is None:
        self.curv = speed_debug_msgs.msg.curv()
      if self.time is None:
        self.time = speed_debug_msgs.msg.speed_time()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.v.v_max_dynamic, _x.v.v_lat_acc, _x.v.v_lon_acc, _x.v.v_slide_dec, _x.v.v_lon_dec, _x.v.v_jerk, _x.v.v_blind, _x.v.v_constrained, _x.curv.curv_final, _x.time.time, _x.x, _x.y, _x.s, _x.acc,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.v.v_max_dynamic, _x.v.v_lat_acc, _x.v.v_lon_acc, _x.v.v_slide_dec, _x.v.v_lon_dec, _x.v.v_jerk, _x.v.v_blind, _x.v.v_constrained, _x.curv.curv_final, _x.time.time, _x.x, _x.y, _x.s, _x.acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.v is None:
        self.v = speed_debug_msgs.msg.v()
      if self.curv is None:
        self.curv = speed_debug_msgs.msg.curv()
      if self.time is None:
        self.time = speed_debug_msgs.msg.speed_time()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.v.v_max_dynamic, _x.v.v_lat_acc, _x.v.v_lon_acc, _x.v.v_slide_dec, _x.v.v_lon_dec, _x.v.v_jerk, _x.v.v_blind, _x.v.v_constrained, _x.curv.curv_final, _x.time.time, _x.x, _x.y, _x.s, _x.acc,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
