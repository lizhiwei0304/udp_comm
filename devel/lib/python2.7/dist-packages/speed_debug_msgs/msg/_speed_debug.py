# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speed_debug_msgs/speed_debug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import speed_debug_msgs.msg

class speed_debug(genpy.Message):
  _md5sum = "d834a9927e9daa0494e9fa3070e36b02"
  _type = "speed_debug_msgs/speed_debug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """super_point[] points
cur_steer cur_steer
speed_issue issue
float64 pub_ros_time
================================================================================
MSG: speed_debug_msgs/super_point
v v
curv curv
speed_time time
float64 x
float64 y
float64 s
float64 acc
================================================================================
MSG: speed_debug_msgs/v
float64 v_max_dynamic
float64 v_lat_acc
float64 v_lon_acc
float64 v_slide_dec
float64 v_lon_dec
float64 v_jerk
float64 v_blind
float64 v_constrained
================================================================================
MSG: speed_debug_msgs/curv
float64 curv_final
================================================================================
MSG: speed_debug_msgs/speed_time
float64 time
================================================================================
MSG: speed_debug_msgs/cur_steer
float64 steer
================================================================================
MSG: speed_debug_msgs/speed_issue
float64 v
float64 acc"""
  __slots__ = ['points','cur_steer','issue','pub_ros_time']
  _slot_types = ['speed_debug_msgs/super_point[]','speed_debug_msgs/cur_steer','speed_debug_msgs/speed_issue','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       points,cur_steer,issue,pub_ros_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(speed_debug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.points is None:
        self.points = []
      if self.cur_steer is None:
        self.cur_steer = speed_debug_msgs.msg.cur_steer()
      if self.issue is None:
        self.issue = speed_debug_msgs.msg.speed_issue()
      if self.pub_ros_time is None:
        self.pub_ros_time = 0.
    else:
      self.points = []
      self.cur_steer = speed_debug_msgs.msg.cur_steer()
      self.issue = speed_debug_msgs.msg.speed_issue()
      self.pub_ros_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.v
        _x = _v1
        buff.write(_get_struct_8d().pack(_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained))
        _v2 = val1.curv
        buff.write(_get_struct_d().pack(_v2.curv_final))
        _v3 = val1.time
        buff.write(_get_struct_d().pack(_v3.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.s, _x.acc))
      _x = self
      buff.write(_get_struct_4d().pack(_x.cur_steer.steer, _x.issue.v, _x.issue.acc, _x.pub_ros_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      if self.cur_steer is None:
        self.cur_steer = speed_debug_msgs.msg.cur_steer()
      if self.issue is None:
        self.issue = speed_debug_msgs.msg.speed_issue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = speed_debug_msgs.msg.super_point()
        _v4 = val1.v
        _x = _v4
        start = end
        end += 64
        (_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained,) = _get_struct_8d().unpack(str[start:end])
        _v5 = val1.curv
        start = end
        end += 8
        (_v5.curv_final,) = _get_struct_d().unpack(str[start:end])
        _v6 = val1.time
        start = end
        end += 8
        (_v6.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.s, _x.acc,) = _get_struct_4d().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 32
      (_x.cur_steer.steer, _x.issue.v, _x.issue.acc, _x.pub_ros_time,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v7 = val1.v
        _x = _v7
        buff.write(_get_struct_8d().pack(_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained))
        _v8 = val1.curv
        buff.write(_get_struct_d().pack(_v8.curv_final))
        _v9 = val1.time
        buff.write(_get_struct_d().pack(_v9.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.s, _x.acc))
      _x = self
      buff.write(_get_struct_4d().pack(_x.cur_steer.steer, _x.issue.v, _x.issue.acc, _x.pub_ros_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      if self.cur_steer is None:
        self.cur_steer = speed_debug_msgs.msg.cur_steer()
      if self.issue is None:
        self.issue = speed_debug_msgs.msg.speed_issue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = speed_debug_msgs.msg.super_point()
        _v10 = val1.v
        _x = _v10
        start = end
        end += 64
        (_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained,) = _get_struct_8d().unpack(str[start:end])
        _v11 = val1.curv
        start = end
        end += 8
        (_v11.curv_final,) = _get_struct_d().unpack(str[start:end])
        _v12 = val1.time
        start = end
        end += 8
        (_v12.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.s, _x.acc,) = _get_struct_4d().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 32
      (_x.cur_steer.steer, _x.issue.v, _x.issue.acc, _x.pub_ros_time,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
