# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speed_debug_msgs/v.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class v(genpy.Message):
  _md5sum = "2bb18dd6157ad5bbbd8073687e75001e"
  _type = "speed_debug_msgs/v"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 v_max_dynamic
float64 v_lat_acc
float64 v_lon_acc
float64 v_slide_dec
float64 v_lon_dec
float64 v_jerk
float64 v_blind
float64 v_constrained"""
  __slots__ = ['v_max_dynamic','v_lat_acc','v_lon_acc','v_slide_dec','v_lon_dec','v_jerk','v_blind','v_constrained']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       v_max_dynamic,v_lat_acc,v_lon_acc,v_slide_dec,v_lon_dec,v_jerk,v_blind,v_constrained

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(v, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.v_max_dynamic is None:
        self.v_max_dynamic = 0.
      if self.v_lat_acc is None:
        self.v_lat_acc = 0.
      if self.v_lon_acc is None:
        self.v_lon_acc = 0.
      if self.v_slide_dec is None:
        self.v_slide_dec = 0.
      if self.v_lon_dec is None:
        self.v_lon_dec = 0.
      if self.v_jerk is None:
        self.v_jerk = 0.
      if self.v_blind is None:
        self.v_blind = 0.
      if self.v_constrained is None:
        self.v_constrained = 0.
    else:
      self.v_max_dynamic = 0.
      self.v_lat_acc = 0.
      self.v_lon_acc = 0.
      self.v_slide_dec = 0.
      self.v_lon_dec = 0.
      self.v_jerk = 0.
      self.v_blind = 0.
      self.v_constrained = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.v_max_dynamic, _x.v_lat_acc, _x.v_lon_acc, _x.v_slide_dec, _x.v_lon_dec, _x.v_jerk, _x.v_blind, _x.v_constrained,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
