# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lanelet_map_msgs/Way.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lanelet_map_msgs.msg
import geometry_msgs.msg

class Way(genpy.Message):
  _md5sum = "3097cc04a1c9c7fa806bc8a9fb7f37c1"
  _type = "lanelet_map_msgs/Way"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string task_area
int8 is_forward
int8 open_concave_obs_det
int8 open_dynamic_obs_det
int8 open_foggy_det
int8 open_water_det
int8 foggy_area
int8 lawn_area
int8 water_area
float64 vel_limit
Node[] points

================================================================================
MSG: lanelet_map_msgs/Node
int32 id
string type
float64 vlimit
geometry_msgs/Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['task_area','is_forward','open_concave_obs_det','open_dynamic_obs_det','open_foggy_det','open_water_det','foggy_area','lawn_area','water_area','vel_limit','points']
  _slot_types = ['string','int8','int8','int8','int8','int8','int8','int8','int8','float64','lanelet_map_msgs/Node[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_area,is_forward,open_concave_obs_det,open_dynamic_obs_det,open_foggy_det,open_water_det,foggy_area,lawn_area,water_area,vel_limit,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Way, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_area is None:
        self.task_area = ''
      if self.is_forward is None:
        self.is_forward = 0
      if self.open_concave_obs_det is None:
        self.open_concave_obs_det = 0
      if self.open_dynamic_obs_det is None:
        self.open_dynamic_obs_det = 0
      if self.open_foggy_det is None:
        self.open_foggy_det = 0
      if self.open_water_det is None:
        self.open_water_det = 0
      if self.foggy_area is None:
        self.foggy_area = 0
      if self.lawn_area is None:
        self.lawn_area = 0
      if self.water_area is None:
        self.water_area = 0
      if self.vel_limit is None:
        self.vel_limit = 0.
      if self.points is None:
        self.points = []
    else:
      self.task_area = ''
      self.is_forward = 0
      self.open_concave_obs_det = 0
      self.open_dynamic_obs_det = 0
      self.open_foggy_det = 0
      self.open_water_det = 0
      self.foggy_area = 0
      self.lawn_area = 0
      self.water_area = 0
      self.vel_limit = 0.
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task_area
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8bd().pack(_x.is_forward, _x.open_concave_obs_det, _x.open_dynamic_obs_det, _x.open_foggy_det, _x.open_water_det, _x.foggy_area, _x.lawn_area, _x.water_area, _x.vel_limit))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        buff.write(_get_struct_i().pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.vlimit))
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_area = str[start:end].decode('utf-8')
      else:
        self.task_area = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.is_forward, _x.open_concave_obs_det, _x.open_dynamic_obs_det, _x.open_foggy_det, _x.open_water_det, _x.foggy_area, _x.lawn_area, _x.water_area, _x.vel_limit,) = _get_struct_8bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = lanelet_map_msgs.msg.Node()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 8
        (val1.vlimit,) = _get_struct_d().unpack(str[start:end])
        _v2 = val1.point
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task_area
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8bd().pack(_x.is_forward, _x.open_concave_obs_det, _x.open_dynamic_obs_det, _x.open_foggy_det, _x.open_water_det, _x.foggy_area, _x.lawn_area, _x.water_area, _x.vel_limit))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        buff.write(_get_struct_i().pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.vlimit))
        _v3 = val1.point
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_area = str[start:end].decode('utf-8')
      else:
        self.task_area = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.is_forward, _x.open_concave_obs_det, _x.open_dynamic_obs_det, _x.open_foggy_det, _x.open_water_det, _x.foggy_area, _x.lawn_area, _x.water_area, _x.vel_limit,) = _get_struct_8bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = lanelet_map_msgs.msg.Node()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 8
        (val1.vlimit,) = _get_struct_d().unpack(str[start:end])
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_8bd = None
def _get_struct_8bd():
    global _struct_8bd
    if _struct_8bd is None:
        _struct_8bd = struct.Struct("<8bd")
    return _struct_8bd
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
