# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_driver_msgs/moving_target_send.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_driver_msgs.msg

class moving_target_send(genpy.Message):
  _md5sum = "ee6df54151d8798d270a6abbbe741402"
  _type = "sensor_driver_msgs/moving_target_send"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 time_stamp        
int32 movingtarget_num   
float64 resolution_send
moving_target[] target          

================================================================================
MSG: sensor_driver_msgs/moving_target
float64        center_x             
float64        center_y             
float64        object_width         
float64        object_length        
float64        object_high          

float64          object_rect_x
float64          object_rect_y
float64          object_rect_width
float64          object_rect_height 

float64        x_src                
float64        y_src                
float64        v_x                  
float64        v_y               
float64        v                   
float64        v_theta
float64        pos_heading         
float64        v_w                  

int32          trackpoint32_index
int32          filter_method

bool         is_updated           
int32          time_stamp           
int32          ID_number                   
int32          confidence_level    
int32          tracked_times        
int32          miss_tracked_times   

int32          dis_veh_xy
int32          position_orientation 
int32          occluded_state       
int32          object_type        
int32          dangerous_level  
float64        trackpoint_index    
"""
  __slots__ = ['time_stamp','movingtarget_num','resolution_send','target']
  _slot_types = ['int32','int32','float64','sensor_driver_msgs/moving_target[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,movingtarget_num,resolution_send,target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(moving_target_send, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.movingtarget_num is None:
        self.movingtarget_num = 0
      if self.resolution_send is None:
        self.resolution_send = 0.
      if self.target is None:
        self.target = []
    else:
      self.time_stamp = 0
      self.movingtarget_num = 0
      self.resolution_send = 0.
      self.target = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2id().pack(_x.time_stamp, _x.movingtarget_num, _x.resolution_send))
      length = len(self.target)
      buff.write(_struct_I.pack(length))
      for val1 in self.target:
        _x = val1
        buff.write(_get_struct_17d2iB10id().pack(_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target is None:
        self.target = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.time_stamp, _x.movingtarget_num, _x.resolution_send,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.moving_target()
        _x = val1
        start = end
        end += 193
        (_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index,) = _get_struct_17d2iB10id().unpack(str[start:end])
        val1.is_updated = bool(val1.is_updated)
        self.target.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2id().pack(_x.time_stamp, _x.movingtarget_num, _x.resolution_send))
      length = len(self.target)
      buff.write(_struct_I.pack(length))
      for val1 in self.target:
        _x = val1
        buff.write(_get_struct_17d2iB10id().pack(_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target is None:
        self.target = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.time_stamp, _x.movingtarget_num, _x.resolution_send,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.moving_target()
        _x = val1
        start = end
        end += 193
        (_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index,) = _get_struct_17d2iB10id().unpack(str[start:end])
        val1.is_updated = bool(val1.is_updated)
        self.target.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d2iB10id = None
def _get_struct_17d2iB10id():
    global _struct_17d2iB10id
    if _struct_17d2iB10id is None:
        _struct_17d2iB10id = struct.Struct("<17d2iB10id")
    return _struct_17d2iB10id
_struct_2id = None
def _get_struct_2id():
    global _struct_2id
    if _struct_2id is None:
        _struct_2id = struct.Struct("<2id")
    return _struct_2id
