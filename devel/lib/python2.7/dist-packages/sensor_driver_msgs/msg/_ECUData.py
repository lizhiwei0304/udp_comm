# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_driver_msgs/ECUData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ECUData(genpy.Message):
  _md5sum = "dc010ec4274516d39106b6b0985bf82d"
  _type = "sensor_driver_msgs/ECUData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint8 f_shift
uint8 f_shift1
float64 fDeForwardVel
float64 fFLRWheelAverAngle

#vehicle speed
float64 fForwardVel

float64 petral_pressure
float64 pressure_back
float64 FrontLeftWheelSpeed
float64 FrontRightWheelSpeed
float64 BackLeftWheelSpeed
float64 BackRightWheelSpeed

float64 motor_I_L
float64 motor_I_R
float64 motor_Torque_L
float64 motor_Torque_R
float64 motor_U_L
float64 motor_U_R
float64 motor_n_now_L
float64 motor_n_now_R
float64 Gear_state_now
float64 steer_degree_now
float64 steer_direction_now
float64 soc_now

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','f_shift','f_shift1','fDeForwardVel','fFLRWheelAverAngle','fForwardVel','petral_pressure','pressure_back','FrontLeftWheelSpeed','FrontRightWheelSpeed','BackLeftWheelSpeed','BackRightWheelSpeed','motor_I_L','motor_I_R','motor_Torque_L','motor_Torque_R','motor_U_L','motor_U_R','motor_n_now_L','motor_n_now_R','Gear_state_now','steer_degree_now','steer_direction_now','soc_now']
  _slot_types = ['std_msgs/Header','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,f_shift,f_shift1,fDeForwardVel,fFLRWheelAverAngle,fForwardVel,petral_pressure,pressure_back,FrontLeftWheelSpeed,FrontRightWheelSpeed,BackLeftWheelSpeed,BackRightWheelSpeed,motor_I_L,motor_I_R,motor_Torque_L,motor_Torque_R,motor_U_L,motor_U_R,motor_n_now_L,motor_n_now_R,Gear_state_now,steer_degree_now,steer_direction_now,soc_now

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ECUData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.f_shift is None:
        self.f_shift = 0
      if self.f_shift1 is None:
        self.f_shift1 = 0
      if self.fDeForwardVel is None:
        self.fDeForwardVel = 0.
      if self.fFLRWheelAverAngle is None:
        self.fFLRWheelAverAngle = 0.
      if self.fForwardVel is None:
        self.fForwardVel = 0.
      if self.petral_pressure is None:
        self.petral_pressure = 0.
      if self.pressure_back is None:
        self.pressure_back = 0.
      if self.FrontLeftWheelSpeed is None:
        self.FrontLeftWheelSpeed = 0.
      if self.FrontRightWheelSpeed is None:
        self.FrontRightWheelSpeed = 0.
      if self.BackLeftWheelSpeed is None:
        self.BackLeftWheelSpeed = 0.
      if self.BackRightWheelSpeed is None:
        self.BackRightWheelSpeed = 0.
      if self.motor_I_L is None:
        self.motor_I_L = 0.
      if self.motor_I_R is None:
        self.motor_I_R = 0.
      if self.motor_Torque_L is None:
        self.motor_Torque_L = 0.
      if self.motor_Torque_R is None:
        self.motor_Torque_R = 0.
      if self.motor_U_L is None:
        self.motor_U_L = 0.
      if self.motor_U_R is None:
        self.motor_U_R = 0.
      if self.motor_n_now_L is None:
        self.motor_n_now_L = 0.
      if self.motor_n_now_R is None:
        self.motor_n_now_R = 0.
      if self.Gear_state_now is None:
        self.Gear_state_now = 0.
      if self.steer_degree_now is None:
        self.steer_degree_now = 0.
      if self.steer_direction_now is None:
        self.steer_direction_now = 0.
      if self.soc_now is None:
        self.soc_now = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.f_shift = 0
      self.f_shift1 = 0
      self.fDeForwardVel = 0.
      self.fFLRWheelAverAngle = 0.
      self.fForwardVel = 0.
      self.petral_pressure = 0.
      self.pressure_back = 0.
      self.FrontLeftWheelSpeed = 0.
      self.FrontRightWheelSpeed = 0.
      self.BackLeftWheelSpeed = 0.
      self.BackRightWheelSpeed = 0.
      self.motor_I_L = 0.
      self.motor_I_R = 0.
      self.motor_Torque_L = 0.
      self.motor_Torque_R = 0.
      self.motor_U_L = 0.
      self.motor_U_R = 0.
      self.motor_n_now_L = 0.
      self.motor_n_now_R = 0.
      self.Gear_state_now = 0.
      self.steer_degree_now = 0.
      self.steer_direction_now = 0.
      self.soc_now = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B21d().pack(_x.f_shift, _x.f_shift1, _x.fDeForwardVel, _x.fFLRWheelAverAngle, _x.fForwardVel, _x.petral_pressure, _x.pressure_back, _x.FrontLeftWheelSpeed, _x.FrontRightWheelSpeed, _x.BackLeftWheelSpeed, _x.BackRightWheelSpeed, _x.motor_I_L, _x.motor_I_R, _x.motor_Torque_L, _x.motor_Torque_R, _x.motor_U_L, _x.motor_U_R, _x.motor_n_now_L, _x.motor_n_now_R, _x.Gear_state_now, _x.steer_degree_now, _x.steer_direction_now, _x.soc_now))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 170
      (_x.f_shift, _x.f_shift1, _x.fDeForwardVel, _x.fFLRWheelAverAngle, _x.fForwardVel, _x.petral_pressure, _x.pressure_back, _x.FrontLeftWheelSpeed, _x.FrontRightWheelSpeed, _x.BackLeftWheelSpeed, _x.BackRightWheelSpeed, _x.motor_I_L, _x.motor_I_R, _x.motor_Torque_L, _x.motor_Torque_R, _x.motor_U_L, _x.motor_U_R, _x.motor_n_now_L, _x.motor_n_now_R, _x.Gear_state_now, _x.steer_degree_now, _x.steer_direction_now, _x.soc_now,) = _get_struct_2B21d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B21d().pack(_x.f_shift, _x.f_shift1, _x.fDeForwardVel, _x.fFLRWheelAverAngle, _x.fForwardVel, _x.petral_pressure, _x.pressure_back, _x.FrontLeftWheelSpeed, _x.FrontRightWheelSpeed, _x.BackLeftWheelSpeed, _x.BackRightWheelSpeed, _x.motor_I_L, _x.motor_I_R, _x.motor_Torque_L, _x.motor_Torque_R, _x.motor_U_L, _x.motor_U_R, _x.motor_n_now_L, _x.motor_n_now_R, _x.Gear_state_now, _x.steer_degree_now, _x.steer_direction_now, _x.soc_now))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 170
      (_x.f_shift, _x.f_shift1, _x.fDeForwardVel, _x.fFLRWheelAverAngle, _x.fForwardVel, _x.petral_pressure, _x.pressure_back, _x.FrontLeftWheelSpeed, _x.FrontRightWheelSpeed, _x.BackLeftWheelSpeed, _x.BackRightWheelSpeed, _x.motor_I_L, _x.motor_I_R, _x.motor_Torque_L, _x.motor_Torque_R, _x.motor_U_L, _x.motor_U_R, _x.motor_n_now_L, _x.motor_n_now_R, _x.Gear_state_now, _x.steer_degree_now, _x.steer_direction_now, _x.soc_now,) = _get_struct_2B21d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B21d = None
def _get_struct_2B21d():
    global _struct_2B21d
    if _struct_2B21d is None:
        _struct_2B21d = struct.Struct("<2B21d")
    return _struct_2B21d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
