# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_driver_msgs/moving_target.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class moving_target(genpy.Message):
  _md5sum = "ec7b54c149fe914e158d9dcc3b59e9f1"
  _type = "sensor_driver_msgs/moving_target"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64        center_x             
float64        center_y             
float64        object_width         
float64        object_length        
float64        object_high          

float64          object_rect_x
float64          object_rect_y
float64          object_rect_width
float64          object_rect_height 

float64        x_src                
float64        y_src                
float64        v_x                  
float64        v_y               
float64        v                   
float64        v_theta
float64        pos_heading         
float64        v_w                  

int32          trackpoint32_index
int32          filter_method

bool         is_updated           
int32          time_stamp           
int32          ID_number                   
int32          confidence_level    
int32          tracked_times        
int32          miss_tracked_times   

int32          dis_veh_xy
int32          position_orientation 
int32          occluded_state       
int32          object_type        
int32          dangerous_level  
float64        trackpoint_index    
"""
  __slots__ = ['center_x','center_y','object_width','object_length','object_high','object_rect_x','object_rect_y','object_rect_width','object_rect_height','x_src','y_src','v_x','v_y','v','v_theta','pos_heading','v_w','trackpoint32_index','filter_method','is_updated','time_stamp','ID_number','confidence_level','tracked_times','miss_tracked_times','dis_veh_xy','position_orientation','occluded_state','object_type','dangerous_level','trackpoint_index']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','int32','bool','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center_x,center_y,object_width,object_length,object_high,object_rect_x,object_rect_y,object_rect_width,object_rect_height,x_src,y_src,v_x,v_y,v,v_theta,pos_heading,v_w,trackpoint32_index,filter_method,is_updated,time_stamp,ID_number,confidence_level,tracked_times,miss_tracked_times,dis_veh_xy,position_orientation,occluded_state,object_type,dangerous_level,trackpoint_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(moving_target, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center_x is None:
        self.center_x = 0.
      if self.center_y is None:
        self.center_y = 0.
      if self.object_width is None:
        self.object_width = 0.
      if self.object_length is None:
        self.object_length = 0.
      if self.object_high is None:
        self.object_high = 0.
      if self.object_rect_x is None:
        self.object_rect_x = 0.
      if self.object_rect_y is None:
        self.object_rect_y = 0.
      if self.object_rect_width is None:
        self.object_rect_width = 0.
      if self.object_rect_height is None:
        self.object_rect_height = 0.
      if self.x_src is None:
        self.x_src = 0.
      if self.y_src is None:
        self.y_src = 0.
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.v is None:
        self.v = 0.
      if self.v_theta is None:
        self.v_theta = 0.
      if self.pos_heading is None:
        self.pos_heading = 0.
      if self.v_w is None:
        self.v_w = 0.
      if self.trackpoint32_index is None:
        self.trackpoint32_index = 0
      if self.filter_method is None:
        self.filter_method = 0
      if self.is_updated is None:
        self.is_updated = False
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.ID_number is None:
        self.ID_number = 0
      if self.confidence_level is None:
        self.confidence_level = 0
      if self.tracked_times is None:
        self.tracked_times = 0
      if self.miss_tracked_times is None:
        self.miss_tracked_times = 0
      if self.dis_veh_xy is None:
        self.dis_veh_xy = 0
      if self.position_orientation is None:
        self.position_orientation = 0
      if self.occluded_state is None:
        self.occluded_state = 0
      if self.object_type is None:
        self.object_type = 0
      if self.dangerous_level is None:
        self.dangerous_level = 0
      if self.trackpoint_index is None:
        self.trackpoint_index = 0.
    else:
      self.center_x = 0.
      self.center_y = 0.
      self.object_width = 0.
      self.object_length = 0.
      self.object_high = 0.
      self.object_rect_x = 0.
      self.object_rect_y = 0.
      self.object_rect_width = 0.
      self.object_rect_height = 0.
      self.x_src = 0.
      self.y_src = 0.
      self.v_x = 0.
      self.v_y = 0.
      self.v = 0.
      self.v_theta = 0.
      self.pos_heading = 0.
      self.v_w = 0.
      self.trackpoint32_index = 0
      self.filter_method = 0
      self.is_updated = False
      self.time_stamp = 0
      self.ID_number = 0
      self.confidence_level = 0
      self.tracked_times = 0
      self.miss_tracked_times = 0
      self.dis_veh_xy = 0
      self.position_orientation = 0
      self.occluded_state = 0
      self.object_type = 0
      self.dangerous_level = 0
      self.trackpoint_index = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17d2iB10id().pack(_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 193
      (_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index,) = _get_struct_17d2iB10id().unpack(str[start:end])
      self.is_updated = bool(self.is_updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17d2iB10id().pack(_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 193
      (_x.center_x, _x.center_y, _x.object_width, _x.object_length, _x.object_high, _x.object_rect_x, _x.object_rect_y, _x.object_rect_width, _x.object_rect_height, _x.x_src, _x.y_src, _x.v_x, _x.v_y, _x.v, _x.v_theta, _x.pos_heading, _x.v_w, _x.trackpoint32_index, _x.filter_method, _x.is_updated, _x.time_stamp, _x.ID_number, _x.confidence_level, _x.tracked_times, _x.miss_tracked_times, _x.dis_veh_xy, _x.position_orientation, _x.occluded_state, _x.object_type, _x.dangerous_level, _x.trackpoint_index,) = _get_struct_17d2iB10id().unpack(str[start:end])
      self.is_updated = bool(self.is_updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d2iB10id = None
def _get_struct_17d2iB10id():
    global _struct_17d2iB10id
    if _struct_17d2iB10id is None:
        _struct_17d2iB10id = struct.Struct("<17d2iB10id")
    return _struct_17d2iB10id
