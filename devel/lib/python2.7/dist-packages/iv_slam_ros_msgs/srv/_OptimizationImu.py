# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iv_slam_ros_msgs/OptimizationImuRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OptimizationImuRequest(genpy.Message):
  _md5sum = "a9d47262566a779b3929228069472871"
  _type = "iv_slam_ros_msgs/OptimizationImuRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 trajectory_id
float64 time
float64 linear_acceleration_x
float64 linear_acceleration_y
float64 linear_acceleration_z
float64 angular_velocity_x
float64 angular_velocity_y
float64 angular_velocity_z
"""
  __slots__ = ['trajectory_id','time','linear_acceleration_x','linear_acceleration_y','linear_acceleration_z','angular_velocity_x','angular_velocity_y','angular_velocity_z']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory_id,time,linear_acceleration_x,linear_acceleration_y,linear_acceleration_z,angular_velocity_x,angular_velocity_y,angular_velocity_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizationImuRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory_id is None:
        self.trajectory_id = 0
      if self.time is None:
        self.time = 0.
      if self.linear_acceleration_x is None:
        self.linear_acceleration_x = 0.
      if self.linear_acceleration_y is None:
        self.linear_acceleration_y = 0.
      if self.linear_acceleration_z is None:
        self.linear_acceleration_z = 0.
      if self.angular_velocity_x is None:
        self.angular_velocity_x = 0.
      if self.angular_velocity_y is None:
        self.angular_velocity_y = 0.
      if self.angular_velocity_z is None:
        self.angular_velocity_z = 0.
    else:
      self.trajectory_id = 0
      self.time = 0.
      self.linear_acceleration_x = 0.
      self.linear_acceleration_y = 0.
      self.linear_acceleration_z = 0.
      self.angular_velocity_x = 0.
      self.angular_velocity_y = 0.
      self.angular_velocity_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.trajectory_id, _x.time, _x.linear_acceleration_x, _x.linear_acceleration_y, _x.linear_acceleration_z, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.trajectory_id, _x.time, _x.linear_acceleration_x, _x.linear_acceleration_y, _x.linear_acceleration_z, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z,) = _get_struct_i7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.trajectory_id, _x.time, _x.linear_acceleration_x, _x.linear_acceleration_y, _x.linear_acceleration_z, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.trajectory_id, _x.time, _x.linear_acceleration_x, _x.linear_acceleration_y, _x.linear_acceleration_z, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z,) = _get_struct_i7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i7d = None
def _get_struct_i7d():
    global _struct_i7d
    if _struct_i7d is None:
        _struct_i7d = struct.Struct("<i7d")
    return _struct_i7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iv_slam_ros_msgs/OptimizationImuResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OptimizationImuResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "iv_slam_ros_msgs/OptimizationImuResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizationImuResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class OptimizationImu(object):
  _type          = 'iv_slam_ros_msgs/OptimizationImu'
  _md5sum = 'a9d47262566a779b3929228069472871'
  _request_class  = OptimizationImuRequest
  _response_class = OptimizationImuResponse
