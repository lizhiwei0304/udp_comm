# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speed_ctrl_msgs/speed_ctrl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class speed_ctrl(genpy.Message):
  _md5sum = "eca0c122130abed6f501d6e0ed63b576"
  _type = "speed_ctrl_msgs/speed_ctrl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 direction
uint32 count
float64 issue_acc
float64 issue_v
float64 cur_acc
float64 cur_speed
float64 rc_path_time
float64 pub_acc_time
float64 rc_acc_time
float64 pub_cmd_time

## for debug
float64 total_s
float64 curv_max
float64 v_max
uint8 running_mode
"""
  __slots__ = ['direction','count','issue_acc','issue_v','cur_acc','cur_speed','rc_path_time','pub_acc_time','rc_acc_time','pub_cmd_time','total_s','curv_max','v_max','running_mode']
  _slot_types = ['uint8','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       direction,count,issue_acc,issue_v,cur_acc,cur_speed,rc_path_time,pub_acc_time,rc_acc_time,pub_cmd_time,total_s,curv_max,v_max,running_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(speed_ctrl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.direction is None:
        self.direction = 0
      if self.count is None:
        self.count = 0
      if self.issue_acc is None:
        self.issue_acc = 0.
      if self.issue_v is None:
        self.issue_v = 0.
      if self.cur_acc is None:
        self.cur_acc = 0.
      if self.cur_speed is None:
        self.cur_speed = 0.
      if self.rc_path_time is None:
        self.rc_path_time = 0.
      if self.pub_acc_time is None:
        self.pub_acc_time = 0.
      if self.rc_acc_time is None:
        self.rc_acc_time = 0.
      if self.pub_cmd_time is None:
        self.pub_cmd_time = 0.
      if self.total_s is None:
        self.total_s = 0.
      if self.curv_max is None:
        self.curv_max = 0.
      if self.v_max is None:
        self.v_max = 0.
      if self.running_mode is None:
        self.running_mode = 0
    else:
      self.direction = 0
      self.count = 0
      self.issue_acc = 0.
      self.issue_v = 0.
      self.cur_acc = 0.
      self.cur_speed = 0.
      self.rc_path_time = 0.
      self.pub_acc_time = 0.
      self.rc_acc_time = 0.
      self.pub_cmd_time = 0.
      self.total_s = 0.
      self.curv_max = 0.
      self.v_max = 0.
      self.running_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI11dB().pack(_x.direction, _x.count, _x.issue_acc, _x.issue_v, _x.cur_acc, _x.cur_speed, _x.rc_path_time, _x.pub_acc_time, _x.rc_acc_time, _x.pub_cmd_time, _x.total_s, _x.curv_max, _x.v_max, _x.running_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 94
      (_x.direction, _x.count, _x.issue_acc, _x.issue_v, _x.cur_acc, _x.cur_speed, _x.rc_path_time, _x.pub_acc_time, _x.rc_acc_time, _x.pub_cmd_time, _x.total_s, _x.curv_max, _x.v_max, _x.running_mode,) = _get_struct_BI11dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI11dB().pack(_x.direction, _x.count, _x.issue_acc, _x.issue_v, _x.cur_acc, _x.cur_speed, _x.rc_path_time, _x.pub_acc_time, _x.rc_acc_time, _x.pub_cmd_time, _x.total_s, _x.curv_max, _x.v_max, _x.running_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 94
      (_x.direction, _x.count, _x.issue_acc, _x.issue_v, _x.cur_acc, _x.cur_speed, _x.rc_path_time, _x.pub_acc_time, _x.rc_acc_time, _x.pub_cmd_time, _x.total_s, _x.curv_max, _x.v_max, _x.running_mode,) = _get_struct_BI11dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BI11dB = None
def _get_struct_BI11dB():
    global _struct_BI11dB
    if _struct_BI11dB is None:
        _struct_BI11dB = struct.Struct("<BI11dB")
    return _struct_BI11dB
