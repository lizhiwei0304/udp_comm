# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iv_dynamicobject_msgs/Predict_traj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iv_dynamicobject_msgs.msg

class Predict_traj(genpy.Message):
  _md5sum = "e493c0baa9e7f0756323a00cb2bfc97a"
  _type = "iv_dynamicobject_msgs/Predict_traj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """    float64 time_stamp
    Points point
    float32 v_x
    float32 v_y
    float32 acc_x
    float32 acc_y
    float32 pos_head
    float32 v_w
    int16 confidence_level

================================================================================
MSG: iv_dynamicobject_msgs/Points
float64 x
float64 y
float64 z
"""
  __slots__ = ['time_stamp','point','v_x','v_y','acc_x','acc_y','pos_head','v_w','confidence_level']
  _slot_types = ['float64','iv_dynamicobject_msgs/Points','float32','float32','float32','float32','float32','float32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,point,v_x,v_y,acc_x,acc_y,pos_head,v_w,confidence_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Predict_traj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = 0.
      if self.point is None:
        self.point = iv_dynamicobject_msgs.msg.Points()
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.pos_head is None:
        self.pos_head = 0.
      if self.v_w is None:
        self.v_w = 0.
      if self.confidence_level is None:
        self.confidence_level = 0
    else:
      self.time_stamp = 0.
      self.point = iv_dynamicobject_msgs.msg.Points()
      self.v_x = 0.
      self.v_y = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.pos_head = 0.
      self.v_w = 0.
      self.confidence_level = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d6fh().pack(_x.time_stamp, _x.point.x, _x.point.y, _x.point.z, _x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = iv_dynamicobject_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 58
      (_x.time_stamp, _x.point.x, _x.point.y, _x.point.z, _x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level,) = _get_struct_4d6fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d6fh().pack(_x.time_stamp, _x.point.x, _x.point.y, _x.point.z, _x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = iv_dynamicobject_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 58
      (_x.time_stamp, _x.point.x, _x.point.y, _x.point.z, _x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level,) = _get_struct_4d6fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d6fh = None
def _get_struct_4d6fh():
    global _struct_4d6fh
    if _struct_4d6fh is None:
        _struct_4d6fh = struct.Struct("<4d6fh")
    return _struct_4d6fh
