# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iv_dynamicobject_msgs/Rectangle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iv_dynamicobject_msgs.msg

class Rectangle(genpy.Message):
  _md5sum = "a41302c037ca3980af28f0230373b1ae"
  _type = "iv_dynamicobject_msgs/Rectangle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Points Point1
Points Point2
Points Point3
Points Point4
float64 Height
int32 Heading
int32 Id_number
float64 v_x
float64 v_y

================================================================================
MSG: iv_dynamicobject_msgs/Points
float64 x
float64 y
float64 z
"""
  __slots__ = ['Point1','Point2','Point3','Point4','Height','Heading','Id_number','v_x','v_y']
  _slot_types = ['iv_dynamicobject_msgs/Points','iv_dynamicobject_msgs/Points','iv_dynamicobject_msgs/Points','iv_dynamicobject_msgs/Points','float64','int32','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Point1,Point2,Point3,Point4,Height,Heading,Id_number,v_x,v_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Rectangle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Point1 is None:
        self.Point1 = iv_dynamicobject_msgs.msg.Points()
      if self.Point2 is None:
        self.Point2 = iv_dynamicobject_msgs.msg.Points()
      if self.Point3 is None:
        self.Point3 = iv_dynamicobject_msgs.msg.Points()
      if self.Point4 is None:
        self.Point4 = iv_dynamicobject_msgs.msg.Points()
      if self.Height is None:
        self.Height = 0.
      if self.Heading is None:
        self.Heading = 0
      if self.Id_number is None:
        self.Id_number = 0
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
    else:
      self.Point1 = iv_dynamicobject_msgs.msg.Points()
      self.Point2 = iv_dynamicobject_msgs.msg.Points()
      self.Point3 = iv_dynamicobject_msgs.msg.Points()
      self.Point4 = iv_dynamicobject_msgs.msg.Points()
      self.Height = 0.
      self.Heading = 0
      self.Id_number = 0
      self.v_x = 0.
      self.v_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d2i2d().pack(_x.Point1.x, _x.Point1.y, _x.Point1.z, _x.Point2.x, _x.Point2.y, _x.Point2.z, _x.Point3.x, _x.Point3.y, _x.Point3.z, _x.Point4.x, _x.Point4.y, _x.Point4.z, _x.Height, _x.Heading, _x.Id_number, _x.v_x, _x.v_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Point1 is None:
        self.Point1 = iv_dynamicobject_msgs.msg.Points()
      if self.Point2 is None:
        self.Point2 = iv_dynamicobject_msgs.msg.Points()
      if self.Point3 is None:
        self.Point3 = iv_dynamicobject_msgs.msg.Points()
      if self.Point4 is None:
        self.Point4 = iv_dynamicobject_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.Point1.x, _x.Point1.y, _x.Point1.z, _x.Point2.x, _x.Point2.y, _x.Point2.z, _x.Point3.x, _x.Point3.y, _x.Point3.z, _x.Point4.x, _x.Point4.y, _x.Point4.z, _x.Height, _x.Heading, _x.Id_number, _x.v_x, _x.v_y,) = _get_struct_13d2i2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d2i2d().pack(_x.Point1.x, _x.Point1.y, _x.Point1.z, _x.Point2.x, _x.Point2.y, _x.Point2.z, _x.Point3.x, _x.Point3.y, _x.Point3.z, _x.Point4.x, _x.Point4.y, _x.Point4.z, _x.Height, _x.Heading, _x.Id_number, _x.v_x, _x.v_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Point1 is None:
        self.Point1 = iv_dynamicobject_msgs.msg.Points()
      if self.Point2 is None:
        self.Point2 = iv_dynamicobject_msgs.msg.Points()
      if self.Point3 is None:
        self.Point3 = iv_dynamicobject_msgs.msg.Points()
      if self.Point4 is None:
        self.Point4 = iv_dynamicobject_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.Point1.x, _x.Point1.y, _x.Point1.z, _x.Point2.x, _x.Point2.y, _x.Point2.z, _x.Point3.x, _x.Point3.y, _x.Point3.z, _x.Point4.x, _x.Point4.y, _x.Point4.z, _x.Height, _x.Heading, _x.Id_number, _x.v_x, _x.v_y,) = _get_struct_13d2i2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d2i2d = None
def _get_struct_13d2i2d():
    global _struct_13d2i2d
    if _struct_13d2i2d is None:
        _struct_13d2i2d = struct.Struct("<13d2i2d")
    return _struct_13d2i2d
