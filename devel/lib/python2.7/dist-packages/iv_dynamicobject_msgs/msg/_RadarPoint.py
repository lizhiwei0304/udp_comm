# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iv_dynamicobject_msgs/RadarPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarPoint(genpy.Message):
  _md5sum = "cba5c3ffed2f8ad0288b366e555ab33f"
  _type = "iv_dynamicobject_msgs/RadarPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 target_ID
float32 range
float32 v
float32 angle
float32 x
float32 y
bool valid
uint8 status
uint8 moving
bool moving_fast
bool moving_slow
"""
  __slots__ = ['target_ID','range','v','angle','x','y','valid','status','moving','moving_fast','moving_slow']
  _slot_types = ['uint8','float32','float32','float32','float32','float32','bool','uint8','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_ID,range,v,angle,x,y,valid,status,moving,moving_fast,moving_slow

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target_ID is None:
        self.target_ID = 0
      if self.range is None:
        self.range = 0.
      if self.v is None:
        self.v = 0.
      if self.angle is None:
        self.angle = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.valid is None:
        self.valid = False
      if self.status is None:
        self.status = 0
      if self.moving is None:
        self.moving = 0
      if self.moving_fast is None:
        self.moving_fast = False
      if self.moving_slow is None:
        self.moving_slow = False
    else:
      self.target_ID = 0
      self.range = 0.
      self.v = 0.
      self.angle = 0.
      self.x = 0.
      self.y = 0.
      self.valid = False
      self.status = 0
      self.moving = 0
      self.moving_fast = False
      self.moving_slow = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B5f5B().pack(_x.target_ID, _x.range, _x.v, _x.angle, _x.x, _x.y, _x.valid, _x.status, _x.moving, _x.moving_fast, _x.moving_slow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.target_ID, _x.range, _x.v, _x.angle, _x.x, _x.y, _x.valid, _x.status, _x.moving, _x.moving_fast, _x.moving_slow,) = _get_struct_B5f5B().unpack(str[start:end])
      self.valid = bool(self.valid)
      self.moving_fast = bool(self.moving_fast)
      self.moving_slow = bool(self.moving_slow)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B5f5B().pack(_x.target_ID, _x.range, _x.v, _x.angle, _x.x, _x.y, _x.valid, _x.status, _x.moving, _x.moving_fast, _x.moving_slow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.target_ID, _x.range, _x.v, _x.angle, _x.x, _x.y, _x.valid, _x.status, _x.moving, _x.moving_fast, _x.moving_slow,) = _get_struct_B5f5B().unpack(str[start:end])
      self.valid = bool(self.valid)
      self.moving_fast = bool(self.moving_fast)
      self.moving_slow = bool(self.moving_slow)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5f5B = None
def _get_struct_B5f5B():
    global _struct_B5f5B
    if _struct_B5f5B is None:
        _struct_B5f5B = struct.Struct("<B5f5B")
    return _struct_B5f5B
